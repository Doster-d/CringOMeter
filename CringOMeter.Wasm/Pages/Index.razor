@page "/"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Text.Json
@using System.Text
@inject HttpClient httpClient

<EditForm Model="@formData" OnValidSubmit="@HandleFormSubmit">
	<DataAnnotationsValidator />

	<InputNumber id="github-issue" placeholder="Номер иссуя, например: 8888" DisplayName="URL" @bind-Value="formData.IssueNumber" />

	<button type="submit">Проверить</button>
</EditForm>

@if (inProgress)
{
	<h2>Анализ текста...</h2>
}

@error

@if (result != null)
{
	<div class="report">
		<h2><img class="avatar" src=@result.TargetIssue.Author.Avatar /><span>@result.TargetIssue.Title</span> <a href=@result.TargetIssue.Url >#@result.TargetIssue.Number</a></h2>
        <div class="labels">
            @foreach(var label in result.TargetIssue.Labels)
            {
                <p class="label" style="background-color: #@label.Color">@label.Name</p>
            }
        </div>
        <article class="markdown-body">
          @((MarkupString)renderedMessage)
        </article>
        <p>
			@result.Prediction
		</p>
	</div>
}

@code {
    private sealed class FormData
	{
		[Required]
		public int IssueNumber { get; set; }
	}

	private sealed record Result(PullRequest TargetIssue, string Prediction);

	private bool inProgress = false;
	private string error;
	private Result result;
	private FormData formData = new();
    private string renderedMessage = string.Empty;

	private async Task HandleFormSubmit()
	{
	    inProgress = true;
		error = null;
		result = null;
		var response = await httpClient.GetAsync($"https://api.github.com/repos/ChaoticOnyx/OnyxBay/issues/{formData.IssueNumber}");
		var issue = await response.Content.ReadFromJsonAsync<PullRequest>(new JsonSerializerOptions
		{
			PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
			Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
			WriteIndented = true,
			DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault
		});

		if (issue is null || !response.IsSuccessStatusCode)
		{
			error = "Иссуй не найден.";
			return;
		}

		var stream = await httpClient.GetStreamAsync("./CringeModel.zip");

	    var model = new CringeModel.ModelInput
		{
			Text = issue.Body
		};

		var prediction = CringeModel.Predict(stream, model);
        await RenderMarkdown(issue.Body);
		result = new Result(issue, $"Кринжовость: {prediction.Probability * 100:F2}%");
		inProgress = false;        
    }

    private async Task RenderMarkdown(string markdown)
    {
        var response = await httpClient.PostAsJsonAsync("https://api.github.com/markdown", new
        {
            text = markdown
        });

        if (!response.IsSuccessStatusCode)
        {
            error = await response.Content.ReadAsStringAsync();
            renderedMessage = string.Empty;
            return;
        }

        renderedMessage = await response.Content.ReadAsStringAsync();
    }
}
